<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>威胁猎杀 on 天御实验室官方博客</title>
    <link>https://blog.tianyulab.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%9D%80/feed/index.xml</link>
    <description>Recent content in 威胁猎杀 on 天御实验室官方博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2018. All rights reserved.</copyright>
    <atom:link href="https://blog.tianyulab.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%9D%80/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>威胁猎杀实战（一）：平台</title>
      <link>https://blog.tianyulab.com/post/ty-practical-guide-to-threat-hunting-01/</link>
      <pubDate>Tue, 13 Nov 2018 11:41:44 +0800</pubDate>
      
      <guid>https://blog.tianyulab.com/post/ty-practical-guide-to-threat-hunting-01/</guid>
      <description>

&lt;pre&gt;&lt;code&gt; ​    在国内Threat Hunting常被翻译成威胁追踪或威胁狩猎，我们认为：“未知攻焉知防，未知防焉知攻”。蓝方并不一定要处于被动防守的状态，完全可以主动猎杀对手！

 ​    本文是威胁猎杀实战系列的第一篇，按照本文的操作步骤，只需几次Copy&amp;amp;Paste即可搭建一套基于Elastic Stack的威胁猎杀平台。在后面的文章我们会进一步完善我们的平台。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;images/ty-practical-guide-to-threat-hunting-01-img01.jpeg&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;table class=&#34;image&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt; 天御威胁感知平台® &lt;/caption&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;images/ty-practical-guide-to-threat-hunting-01-img02.jpeg&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;table class=&#34;image&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt; NSM架构 &lt;/caption&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-部署elastic-stack-容器化&#34;&gt;1.部署Elastic Stack（容器化）&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;nameserver 9.9.9.9&amp;quot; &amp;gt; /etc/resolv.conf
$ git clone https://github.com/Zer0d0y/docker-elk.git
$ docker-compose build &amp;amp;&amp;amp; docker-compose up -d

访问Kibana web UI：http://localhost:5601

完整指南参考：
https://github.com/Zer0d0y/docker-elk
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-部署bro&#34;&gt;2.部署Bro&lt;/h3&gt;

&lt;h4 id=&#34;2-1-安装&#34;&gt;2.1 安装&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;方式一：使用官方提供的Binary软件包&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ubuntu 16.04：
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Install_Bro_from_binary.sh
$ chmod +x Install_Bro_from_binary.sh &amp;amp;&amp;amp; ./Install_Bro_from_binary.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bro repository提供5个Binary软件包：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bro，包含meta-package&lt;/li&gt;
&lt;li&gt;bro-core，包含Bro core和scripts&lt;/li&gt;
&lt;li&gt;broctl，包含Bro control&lt;/li&gt;
&lt;li&gt;libbroccoli和libbroccoli-dev，包含libbroccoli及其开发头文件&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Ubuntu 16.04：
$ wget -nv http://download.opensuse.org/repositories/network:bro/xUbuntu_16.04/Release.key -O Release.key
$ sudo apt-key add - &amp;lt; Release.key
$ sudo apt-get update
$ sudo sh -c &amp;quot;echo &#39;deb http://download.opensuse.org/repositories/network:/bro/xUbuntu_16.04/ /&#39; &amp;gt; /etc/apt/sources.list.d/bro.list&amp;quot;
$ sudo apt-get update
$ sudo apt-get install bro

# 注意：官方同时提供nightly binary builds：https://www.bro.org/download/nightly-packages.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;方式二：源码安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;依赖软件包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他依赖软件包（可选）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;参考：https://www.bro.org/sphinx/install/install.html#id6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Ubuntu 16.04：
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Install_Bro_from_source.sh
$ chmod +x Install_Bro_from_source.sh &amp;amp;&amp;amp; ./Install_Bro_from_source.sh

# 注意：也可以安装Bro开发版：https://www.bro.org/sphinx/install/install.html#id9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;方式三：容器化方式（Docker）&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;参考：
https://github.com/bro/bro-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-2-配置&#34;&gt;2.2 配置&lt;/h4&gt;

&lt;h5 id=&#34;2-2-1-bro配置文件&#34;&gt;2.2.1 Bro配置文件&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$PREFIX == 默认值：/opt/bro或/usr/local/bro

配置监听网络接口：$PREFIX/etc/node.cfg
配置本地网络地址：$PREFIX/etc/networks.cfg
主配置文件：$PREFIX/etc/broctl.cfg

# 完整配置参考：https://www.zer0d0y.info/post/Bro-plus-ELK/
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-2-2-使用systemd管理bro&#34;&gt;2.2.2 使用systemd管理Bro&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;# 修改Bro接口名称
$ INAME=$(ip -o link show | sed -rn &#39;/^[0-9]+: en/{s/.: ([^:]*):.*/\1/p}&#39;)
$ sed -i &amp;quot;s/eth0/$INAME/g&amp;quot; /usr/local/bro/etc/node.cfg
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Bro_systemd.service -O /etc/systemd/system/bro.service
$ systemctl daemon-reload   
$ systemctl enable bro  
$ systemctl start bro   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-整合elastic-stack-kafka-和bro&#34;&gt;3.整合Elastic Stack，[Kafka]和Bro&lt;/h3&gt;

&lt;h4 id=&#34;3-1-bro日志101&#34;&gt;3.1 Bro日志101&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;conn.log -- IP, TCP, UDP, ICMP
dhcp.log -- DHCP
dns.log -- DNS查询/响应
ftp.log -- FTP请求/响应
http.log -- HTTP请求/响应
files.log -- 文件还原
mysql.log -- MySQL
irc.log -- IRC
radius.log -- RADIUS认证
kerberos.log -- Kerberos认证
sip.log -- SIP协议
smtp.log -- SMTP事务
ssl.log -- SSL握手
ssh.log -- SSH握手
syslog.log -- Syslog消息
tunnel.log -- 封装隧道的细节

Microsoft相关的日志
dce_rpc.log -- DCE/RPC消息
ntlm.log -- NTLM
rdp.log -- 远程桌面 (RDP)
smb_files.log -- SMB文件传输
smb_mapping.log -- SMB管道

# 详细解释：https://github.com/corelight/bro-cheatsheets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-2-使用elastic-stack直接处理bro的csv格式日志&#34;&gt;3.2 使用Elastic Stack直接处理Bro的csv格式日志&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 注意事项
1.端口开放（--&amp;gt; 防火墙）：
    elasticsearch:9200
    Logstash:5044
    Kibana:5061
2.&amp;quot;index =&amp;gt; &amp;quot;bro_logs-%{+YYYY.MM.dd}&amp;quot;&amp;quot;,其中index名称必须小写
3.创建Index Patterns前必须有对应Bro的日志，否则会导致Field不全

# 软件环境
Elastic Stack 6.4
bro version 2.5.4

# 方式一：使用Filebeat处理Bro日志，
数据流：
Bro --&amp;gt; Filebeat --&amp;gt; ELK(Logstash)

1.安装Filebeat

Ubuntu 16.04：
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Install_Filebeat.sh
$ chmod +x Install_Filebeat.sh &amp;amp;&amp;amp; ./Install_Filebeat.sh

2.配置ELK(Logstash)接收来自FileBeat收集的Bro日志
# 注意：此命令在ELK主机上执行
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Deploy_Bro_Filebeat_Logstash.sh
$ chmod +x Deploy_Bro_Filebeat_Logstash.sh &amp;amp;&amp;amp; ./Deploy_Bro_Filebeat_Logstash.sh
$ sed -i &#39;s/8.8.8.8/ELK IP/g&#39; Bro_Filebeat_Logstash.conf
$ systemctl start logstash.service

3.配置Filebeat处理Bro日志
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Deploy_Filebeat.sh
$ chmod +x Deploy_Filebeat.sh &amp;amp;&amp;amp; ./Deploy_Filebeat.sh
$ sed -i &#39;s/8.8.8.8/ELK logstash IP/g&#39; /etc/filebeat/filebeat.yml
$ service filebeat start

4.访问Kibana web UI：http://localhost:5601，添加&amp;quot;Index Patterns&amp;quot;
正常情况下，字段(Fields) &amp;gt;= 218

# 方式二：使用Logstash处理Bro日志，
数据流：
Bro --&amp;gt; Logstash --&amp;gt; ELK(Elasticsearch)

1.安装Logstash

Ubuntu 16.04：
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Install_Logstash.sh
$ chmod +x Install_Logstash.sh &amp;amp;&amp;amp; ./Install_Logstash.sh

2.配置Logstash处理Bro日志

# 注意：如ELK和Bro不在同一台服务器上，需要修改配置文件中elasticsearch的值，如： hosts =&amp;gt; [&amp;quot;ELK IP:9200&amp;quot;]
# sed -i &#39;s/localhost/ELK IP/g&#39; bro*.conf

$ cd /etc/logstash/conf.d
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Deploy_Logstash.sh
$ chmod +x Deploy_Logstash.sh &amp;amp;&amp;amp; ./Deploy_Logstash.sh
$ rm -f Deploy_Logstash.sh

3.访问Kibana web UI：http://localhost:5601，添加“Index Patterns”

# 调试&amp;amp;排错
## Logstash
$ mkdir -p /root/xxx/logs &amp;amp;&amp;amp; cd /root/xxx
$ /usr/share/logstash/bin/logstash -f xxx.conf --path.logs /root/xxx/logs --log.level=debug --config.debug --config.test_and_exit                                                                                   
$ /usr/share/logstash/bin/logstash -f nmap-logstash.conf --path.logs /root/xxx/logs/ --log.level=debug --config.debug 2&amp;gt;&amp;amp;1 | tee /root/xxx/logs/101
## FileBeat
$ filebeat -e -d &amp;quot;*&amp;quot; -c /etc/filebeat/filebeat.yml

# 容器化ELK项目对应配置（https://github.com/Zer0d0y/docker-elk）
1.docker-elk/docker-compose.yml
  logstash:
    ports:
      - &amp;quot;5044:5044&amp;quot;
2.docker-elk/logstash/pipeline/bro_logs.conf
3.docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-使用elastic-stack-kafka处理bro的json格式日志&#34;&gt;3.3 使用Elastic Stack + Kafka处理Bro的json格式日志&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;数据流：
Bro --&amp;gt; Kafka --&amp;gt; Logstash --&amp;gt; ELK(Elasticsearch)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-3-1-安装kafka&#34;&gt;3.3.1 安装Kafka&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;# 软件环境：
# Ubuntu 16.04
# Elastic Stack 6.4
# Bro 2.5.5
# Kafka 2.12
# librdkafka-0.9.4

# 1.安装Kafka
# 创建临时目录
mkdir /src &amp;amp;&amp;amp; cd /src

# 下载&amp;amp;验证kafka
wget https://archive.apache.org/dist/kafka/1.0.0/kafka_2.12-1.0.0.tgz
wget https://archive.apache.org/dist/kafka/1.0.0/kafka_2.12-1.0.0.tgz.asc
gpg --recv-keys  3B417B9B 
gpg -v kafka_2.12-1.0.0.tgz.asc

# 安装&amp;amp;启动kafka服务
tar -xf kafka_2.12-1.0.0.tgz
sudo mv kafka_2.12-1.0.0 /opt/kafka
sudo sed -i &#39;/^log.dirs/{s/=.*//;}&#39; /opt/kafka/config/server.properties
sudo sed -i &#39;s/^log.dirs/log.dirs=\/var\/lib\/kafka/&#39; /opt/kafka/config/server.properties
sudo sed -i &#39;$alisteners=bro://BRO所在机器的IP地址:9092&#39; /opt/kafka/config/server.properties 

cat &amp;gt; /etc/systemd/system/kafka.service &amp;lt;&amp;lt; EOF
[Unit]
Description=Kafka Service
Wants=network.target
After=zookeeper.target

[Service]
ExecStart=/opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties
ExecReload=on-failure
Restart=always
User=root
Group=root
StandardOutput=syslog
StandardError=syslog

[Install]
WantedBy=multi-user.target
EOF

# 
sudo apt-get -y install zookeeperd
sudo systemctl enable zookeeper 
sudo systemctl start zookeeper
sudo systemctl daemon-reload
sudo systemctl enable kafka 
sudo systemctl start kafka
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-3-2-安装kafka插件-metron-bro-plugin-kafka&#34;&gt;3.3.2 安装kafka插件（metron-bro-plugin-kafka）&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;# 更新
bro-pkg install apache/metron-bro-plugin-kafka
http://mailman.icsi.berkeley.edu/pipermail/bro/2018-October/013654.html

## 安装librdkafka
curl -L https://github.com/edenhill/librdkafka/archive/v0.9.4.tar.gz | tar xvz 
cd librdkafka-0.9.4/ 
./configure --enable-sasl 
make 
sudo make install 
## 构建插件
### 先安装Bro 2.5.5
cd /src
wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Install_Bro_from_source.sh
chmod +x Install_Bro_from_source.sh &amp;amp;&amp;amp; ./Install_Bro_from_source.sh

git clone https://github.com/apache/metron-bro-plugin-kafka.git
cd metron-bro-plugin-kafka
./configure --bro-dist=/src/bro-2.5.5/
make 
sudo make install
## 验证
/usr/local/bro/bin/bro -N Apache::Kafka

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-3-3-配置bro把日志发送到kafka&#34;&gt;3.3.3 配置Bro把日志发送到Kafka&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ vi /usr/local/bro/share/bro/site/local.bro

@load /usr/local/bro/lib/bro/plugins/APACHE_KAFKA/scripts/Apache/Kafka/logs-to-kafka.bro
redef Kafka::topic_name = &amp;quot;&amp;quot;;
redef Kafka::logs_to_send = set(Conn::LOG, HTTP::LOG, DNS::LOG, SMTP::LOG, SSL::LOG, Software::LOG, DHCP::LOG, FTP::LOG, IRC::LOG, Notice::LOG, X509::LOG, SSH::LOG, SNMP::LOG);
redef Kafka::kafka_conf = table([&amp;quot;metadata.broker.list&amp;quot;] = &amp;quot;BRO所在机器的IP地址:9092&amp;quot;);
redef Kafka::tag_json = T;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-3-4-配置logstash接收kafka日志&#34;&gt;3.3.4 配置Logstash接收Kafka日志&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;## 先安装Logstash
$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Install_Logstash.sh
$ chmod +x Install_Logstash.sh &amp;amp;&amp;amp; ./Install_Logstash.sh
$ echo config.reload.automatic: true |sudo tee -a /etc/logstash/logstash.yml
$ echo config.reload.interval: 3s |sudo tee -a /etc/logstash/logstash.yml
# 以Bro conn日志为例：
$ cat &amp;gt; /etc/logstash/conf.d/bro-conn.conf &amp;lt;&amp;lt; EOF
input {
	kafka {
		topics =&amp;gt; [&amp;quot;conn&amp;quot;]
		group_id =&amp;gt; &amp;quot;bro_logstash&amp;quot;
     		bootstrap_servers =&amp;gt; &amp;quot;10.42.94.92:9092&amp;quot;
     		codec =&amp;gt; json
     		type =&amp;gt; &amp;quot;conn&amp;quot;
     		auto_offset_reset =&amp;gt; &amp;quot;earliest&amp;quot;
	}
}

output {
	if [type] == &amp;quot;conn&amp;quot; {
		elasticsearch {
			hosts =&amp;gt; [&amp;quot;192.168.8.112:9200&amp;quot;]
			index =&amp;gt; &amp;quot;bro-conn-%{+YYYY.MM.dd}&amp;quot;
		}
	}
}
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-3-5-一键部署脚本&#34;&gt;3.3.5 一键部署脚本&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ wget https://github.com/tianyulab/Threat_Hunting_with_ELK/raw/master/Bro/Deploy_Kafka_for_Bro.sh
# 修改10.42.94.92 --&amp;gt; 为Kafka监听IP
$ sed -i &#39;s/10.42.94.92/Kafka监听IP/g&#39; Deploy_Kafka_for_Bro.sh
# 修改192.168.8.112 --&amp;gt; 为Elasticsearch监听IP
$ sed -i &#39;s/192.168.8.112/Elasticsearch监听IP/g&#39; Deploy_Kafka_for_Bro.sh
# 修改&amp;quot;BRO所在机器的IP地址&amp;quot;为BRO所在机器的IP地址
$ sed -i &#39;s/BRO所在机器的IP地址/BRO所在机器的IP地址/g&#39; Deploy_Kafka_for_Bro.sh
$ sh -x Deploy_Kafka_for_Bro.sh

# 验证
$ sudo systemctl status zookeeper
$ sudo systemctl status kafka
$ systemctl status logstash
$ /usr/local/bro/bin/bro -N Apache::Kafka
$ /usr/local/bro/bin/broctl status
$ netstat -tunlp  | grep -E &#39;2181|9092|9600&#39;

# 安装过程排错
$ watch tail log.out
$ cat log.out | grep error
$ cat log.out | grep -B 10 &amp;quot;Configuring incomplete, errors occurred&amp;quot;
$ cat log.out | grep -i &amp;quot;cd librdkafka-0.9.4&amp;quot; -A 50 | more

# Kafka 排错
$ apt-get install kafkacat
$ kafkacat -b 192.168.8.115:9092 -t http -o end # &amp;quot;http&amp;quot;为Bro的kafka插件定义的&amp;quot;topics&amp;quot;
或
$ /opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server 192.168.8.115:9092 --topic http

# Kibana 创建index
bro-conn-*
bro-dns-*
... ...
然后创建
bro-*
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;images/ty-practical-guide-to-threat-hunting-01-img03.jpeg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;致谢：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@HardenedLinux 团队&lt;/p&gt;

&lt;p&gt;@Rock NSM团队&lt;/p&gt;

&lt;p&gt;@Security Onion团队&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzU0MzgyMzM2Nw==&amp;amp;mid=2247483724&amp;amp;idx=1&amp;amp;sn=40ca6e7c577f0bbac2cc6424ee61ce00&amp;amp;chksm=fb04c224cc734b32a1d3ed27209a8a279159ca46fb51575dda1828f00c391f3b58920b581c50&amp;amp;scene=0#rd 微信公众号链接&#34;&gt;&lt;strong&gt;微信公众号：威胁猎杀实战（一）：平台&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>